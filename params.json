{"name":"Npdynamodb","tagline":"A Node.js Simple Query Builder and ORM for AWS DynamoDB","body":"# npdynamodb [![npm version](https://badge.fury.io/js/npdynamodb.svg)](http://badge.fury.io/js/npdynamodb) [![Code Climate](https://codeclimate.com/github/noppoMan/npdynamodb/badges/gpa.svg)](https://codeclimate.com/github/noppoMan/npdynamodb) [![wercker status](https://app.wercker.com/status/1ccc24d0af9825e0ae7990ea3fd8121a/s \"wercker status\")](https://app.wercker.com/project/bykey/1ccc24d0af9825e0ae7990ea3fd8121a)\r\nA Node.js Simple Query Builder and ORM for AWS DynamoDB.\r\n\r\n## Motivation\r\nWhen I visited [here ](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#query-property\r\n) for the first time, I closed it in a moment.\r\nBecause it is too long and hard to see to understand.\r\nSo I decided to make client to handle DynamoDB more easier and It doesn't take waste of time to read documentation for it.\r\n\r\n## Supported DynamoDB Api Versions\r\n* 2012-08-10\r\n\r\n## Installation\r\n```sh\r\nnpm install npdynamodb\r\n```\r\n\r\n## Why is the Pure AWS-SDK in Node.js NOT good?\r\n\r\nParameters are like Chant of the magic.\r\n[http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html)\r\n\r\n## Usage\r\nNpdynamodb has two faces. One is Simple Query Builder and the other is Light ORM.\r\nWe release you redundancy codes and see simple syntax.  \r\nof course, will not see callback hell !!\r\n\r\n\r\n## Usage of QueryBuilder\r\n\r\nInitialization\r\n```js\r\nvar npdynamodb = require('npdynamodb');\r\nvar AWS = require('aws-sdk');\r\n\r\nvar dynamodb = new AWS.DynamoDB({\r\n  apiVersion: '2012-08-10'\r\n});\r\n\r\nvar npd = npdynamodb.createClient(dynamodb);\r\n\r\n// Or can take options\r\nvar npd = npdynamodb.createClient(dynamodb, {\r\n  timeout: 3000,\r\n  initialize: function(){\r\n    // Some Initialization here.\r\n  }\r\n});\r\n```\r\n\r\n##### Get by hash key (getItem operation)\r\n```js\r\nnpd().table('users')\r\n.where(\"id\", 1)\r\n.first()\r\n.then(function(data){\r\n\r\n  console.log(data)\r\n  // => {Item: {id: 1, name: 'Tonny'}, Count: 1, ScannedCount: 1}\r\n\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### Get rows with where (query operation)\r\n```js\r\nnpd().table('users')\r\n.where('name', 'tonny') //hash key\r\n.then(function(data){\r\n\r\n  console.log(data)\r\n  // => {Items: [{id: 1, name: 'Tonny'}], Count: 1, ScannedCount: 1}\r\n\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### Get multiple rows with where, filter and descending order\r\n```js\r\nnpd().table('chats')\r\n.where('room_id', 'room1') // hash key\r\n.where('timestamp', '>', 1429454911) // range key\r\n.filter('user_name', 'tonny') // non index key\r\n.desc()\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### whereIn\r\nwhereIn call batchGetItem instead of query operation.\r\n\r\n###### Single Key Usage\r\n```js\r\nnpd().table('chats')\r\n.whereIn('room_id', ['room1', 'room2', 'room3'])\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n###### Multiple Kyes Usage\r\n```js\r\nnpd().table('chats')\r\n.whereIn(['room_id', 'timestamp'], [['room1', 1429454911], ['room2', 1429454912], ['room3', 1429454913]])\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### Count\r\n```js\r\nnpd().table('chats')\r\n.where('room_id', 'room1')\r\n.count()\r\n.then(function(data){\r\n  console.log(data.Count);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### Extra options\r\nYou can set extra options in callback of `feature` method. All options are transformed from property to method, But its name(camelized) and arguments are same as pure AWS-SDK for node.js.\r\n\r\n```js\r\nnpd().table('users')\r\n.where('name', 'tonny')\r\n.feature(function(f){ // f is raw feature object.\r\n  f.consistentRead(true);\r\n  f.returnConsumedCapacity('TOTAL');\r\n})\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### create(Make Overwrite all of values, if key[s] have already existed.)\r\n```js\r\nnpd().table('users')\r\n.create({ // Also can save collection.\r\n  id: 2,\r\n  name: 'rhodes',\r\n  company: {\r\n    name: 'Stark Industry',\r\n    tel: '123456789',\r\n    zip: '123456789',\r\n    address: 'foo-bar-123'\r\n  }\r\n})\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n##### Update\r\n```js\r\nnpd().table('users')\r\n.set(\"company\", \"PUT\", {\r\n  name: 'moved company',\r\n  tel: '123-456-789',\r\n  zip: '123-456-789',\r\n  address: 'foo-bar-456'\r\n})\r\n.set(\"suite_color\", \"ADD\", 1)\r\n.update()\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n```\r\n\r\n\r\n##### Update with expressions\r\n```js\r\nnpd().table('users')\r\n.feature(function(f){\r\n  f.updateExpression('SET #gt = if_not_exists(#gt, :one)');\r\n\r\n  f.expressionAttributeNames({\r\n    '#gt': 'gender_type'\r\n  });\r\n\r\n  f.expressionAttributeValues({\r\n    ':one': 1\r\n  });\r\n\r\n  f.returnValues('UPDATED_NEW');\r\n})\r\n.update()\r\n.then(function(data){\r\n  console.log(data);\r\n})\r\n.catch(function(err){\r\n  console.err(err);\r\n});\r\n\r\n```\r\n\r\n## Usage of ORM\r\n\r\nInitialization\r\n```js\r\nvar npdynamodb = require('npdynamodb');\r\nvar AWS = require('aws-sdk');\r\n\r\nvar npd = npdynamodb.createClient(new AWS.DynamoDB({\r\n  apiVersion: '2012-08-10'\r\n}));\r\n\r\nvar Chat = npdynamodb.define('chats', {\r\n  npdynamodb: npd,\r\n\r\n  hashKey: 'id',\r\n\r\n  rangeKey: 'timestamp'\r\n});\r\n```\r\n\r\n##### Fast get with hash_key\r\n```js\r\nChat.find(1).then(function(chat){  // where('id', '=', 1)\r\n  // Get value of id key\r\n  console.log(chat.get('id'));\r\n\r\n  // Get attribute keys\r\n  console.log(chat.keys());\r\n\r\n  // Get attribute values\r\n  console.log(chat.values());\r\n\r\n  // Pick specified key and value pairs\r\n  console.log(chat.pick('chat_id', 'timestamp'));\r\n\r\n  // Transform as json string.\r\n  console.log(chat.toJson());\r\n});\r\n```\r\n\r\n##### fetch with multiple conditions\r\n```js\r\nChat.where('id', 1)\r\n// complex conditions\r\n.query(function(qb){\r\n  qb.whereBeteen('timestamp', 1429212102, 1429212202);\r\n})\r\n.fetch()\r\n.then(function(data){\r\n\r\n  // Check query result is empty?\r\n  console.log(data.isEmpty());\r\n  // => false\r\n\r\n  // Get First Item\r\n  console.log(data.first().get('id'));\r\n  // => 1\r\n\r\n  // Get Last Item\r\n  console.log(data.last().get('id'));\r\n  // => 1\r\n\r\n  // Seequence(Also supported map, find, etc....)\r\n  data.each(function(item){\r\n    console.log(item.get('id'));\r\n  });\r\n\r\n  // Pluck specific column values.\r\n  console.log(data.pluck('id'));\r\n\r\n  // Get as object.\r\n  console.log(data.toArray());\r\n  // => [{id: 1, name: 'tonny', company: {....}}]\r\n\r\n});\r\n```\r\n\r\n##### Save\r\n```js\r\n// As Static\r\nChat.save({\r\n  room_id: 'room1',\r\n  ....\r\n})\r\n.then(function(chat){\r\n  console.log(chat.get('room_id'));\r\n});\r\n\r\n// As Instance\r\nvar chat = new Chat({\r\n  room_id: 'room1',\r\n  user_id: 1\r\n});\r\nchat.set('message', 'This is a message.');\r\n\r\nchat.save()\r\n.then(function(chat){\r\n  console.log(chat.get('room_id'));\r\n});\r\n```\r\n\r\n##### Destroy\r\n```js\r\nchat.destroy()\r\n.then(function(data){\r\n  console.log(data);\r\n});\r\n```\r\n\r\n##### Custom Methods and Properties\r\n```js\r\nvar Chat = npdynamodb.define('chats', {\r\n  npdynamodb: npd,\r\n\r\n  hashKey: 'id',\r\n\r\n  rangeKey: 'timestamp',\r\n\r\n  customProtoTypeConstant: 1,\r\n\r\n  customProtoTypeMethod: function(){\r\n    return this.get('id') === 1;\r\n  }\r\n\r\n},\r\n\r\n{\r\n  customStaticConstant: 1,\r\n\r\n  customStaticMethod: function(){\r\n    return this.where('room_id', 'room1')\r\n      .query(function(qb){\r\n        qb.filter('timestamp', '>', 1429212102);\r\n      })\r\n      .fetch();\r\n  }\r\n});\r\n\r\n// prototype\r\nChat.find(1).then(function(chat){\r\n  console.log(chat.customProtoTypeConstant);\r\n  console.log(chat.customeProtoTypeMethod());\r\n});\r\n\r\n\r\n// static\r\nconsole.log(Chat.customStaticConstant);\r\n\r\nChat.customStaticMethod().then(function(data){\r\n  console.log(data);\r\n});\r\n```\r\n\r\n# Apis\r\n\r\n##  QueryBuilder\r\n\r\n##### options\r\n* timeout: default is 5000(ms)\r\n* initialize\r\n\r\n##### operations\r\n* createTable\r\n* deleteTable\r\n* alterTable\r\n* all\r\n* count\r\n* create\r\n* update\r\n* delete\r\n* describe\r\n* showTables\r\n* feature\r\n* rawClient: Return promisified AWS.DynamoDB\r\n\r\n##### Where\r\n* where\r\n* whereIn: Using batchGetItem\r\n* whereBetween\r\n* whereBeginsWith\r\n\r\n##### Filter\r\n* filter\r\n* filterBetween\r\n* filterIn\r\n* filterBeginsWith\r\n* filterContains\r\n* filterNotContains\r\n* filterNull\r\n* filterNotNull\r\n\r\n\r\n##### Other conditions\r\n* select :alias of `attributesToGet(['attr1', 'attr2'])`\r\n* table\r\n* indexName\r\n* asc :alias of `scanIndexForward(true)`\r\n* desc :alias of `scanIndexForward(false)`\r\n* limit\r\n\r\n\r\n##### feature methods (2012-08-10)\r\n* requestItems\r\n* returnConsumedCapacity\r\n* returnItemCollectionMetrics\r\n* attributeDefinitions\r\n* tableName\r\n* keySchema\r\n* localSecondaryIndexes\r\n* globalSecondaryIndexes\r\n* provisionedThroughput\r\n* key\r\n* expected\r\n* conditionalOperator\r\n* returnValues\r\n* conditionExpression\r\n* expressionAttributeNames\r\n* expressionAttributeValues\r\n* attributesToGet\r\n* consistentRead\r\n* projectionExpression\r\n* exclusiveStartTableName\r\n* item\r\n* keyConditions\r\n* queryFilter\r\n* scanIndexForward\r\n* exclusiveStartKey\r\n* filterExpression\r\n* scanFilter\r\n* totalSegments\r\n* segment\r\n* attributeUpdates\r\n* updateExpression\r\n* globalSecondaryIndexUpdates\r\n\r\n### Events\r\n* `beforeQuery`: Fired before sending request\r\n* `afterQuery`: Fired after getting response\r\n\r\n### Callbacks\r\n* `beforeQuery`: Executed before sending request\r\n* `afterQuery`: Executed after getting response\r\n\r\n## ORM\r\n##### Operations\r\n* find\r\n* all\r\n* where\r\n* then\r\n* save\r\n* destroy\r\n\r\n##### Model\r\n* get\r\n* set\r\n* unset\r\n* extend\r\n* each\r\n* map\r\n* keys\r\n* values\r\n* contains\r\n* pick\r\n* toJson\r\n* attributes\r\n\r\n##### Collection\r\n* pluck\r\n* each\r\n* map\r\n* reduce\r\n* reduceRight\r\n* find\r\n* filter\r\n* where\r\n* findWhere\r\n* reject\r\n* every\r\n* some\r\n* invoke\r\n* sortBy\r\n* groupBy\r\n* indexBy\r\n* countBy\r\n* shuffle\r\n* sample\r\n* size\r\n* partition\r\n* first\r\n* last\r\n* toJson\r\n* toArray\r\n\r\n\r\n## Migration\r\nWe support schema migration for Dynamodb.\r\n\r\n##### First, initialize your project to run migration.\r\n```sh\r\nnpd install -g npdynamodb\r\n# cd /path/to/your/project\r\nnpd init\r\n# created npdfile.js\r\n```\r\n\r\n##### npdfile.js\r\n```js\r\n'use strict';\r\n\r\nvar AWS = require('aws-sdk');\r\n\r\nvar dynamodb = new AWS.DynamoDB({\r\n  apiVersion: '2012-08-10',\r\n  accessKeyId: \"AWS_KEY\",\r\n  secretAccessKey: \"AWS_SECRET\",\r\n  region: \"ap-northeast-1\"\r\n});\r\n\r\nmodule.exports = {\r\n\r\n  // Specify migration file path. Default is `./migrations`\r\n  // migration: {\r\n  //  migrationFilePath: './npdynamodb_migrations'\r\n  // },\r\n\r\n  development: {\r\n    dynamoClient: dynamodb,\r\n    migrations: {\r\n      ProvisionedThroughput: [10, 10],\r\n      tableName: 'npd_migrations'\r\n    }\r\n  },\r\n\r\n  staging: {\r\n    dynamoClient: dynamodb,\r\n    migrations: {\r\n      ProvisionedThroughput: [10, 10],\r\n      tableName: 'npd_migrations'\r\n    }\r\n  },\r\n\r\n  production: {\r\n    dynamoClient: dynamodb,\r\n    migrations: {\r\n      ProvisionedThroughput: [10, 10],\r\n      tableName: 'npd_migrations'\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n##### Generate migration file.\r\n```sh\r\nnpd migrate:generate create_users\r\n# => /migrations/20150406083039_create_users.js\r\n```\r\n\r\n##### Edit migration file\r\n/migrations/20150406083039_create_users.js\r\n```js\r\nexports.up = function(migrator){\r\n  return migrator().createTable('chats', function(t){\r\n    t.string('room_id').hashKey();\r\n    t.number('timestamp').rangeKey();\r\n    t.provisionedThroughput(100, 100); // read, write\r\n\r\n    t.globalSecandayIndex('indexName1', function(t){\r\n      t.string('user_id').hashKey();\r\n      t.provisionedThroughput(100, 100); // read, write\r\n      t.ProjectionTypeAll(); //default is NONE\r\n    });\r\n\r\n    t.localSecandaryIndex('indexName2', function(t){\r\n      t.string('room_id').hashKey();\r\n      t.number('user_id').rangeKey();\r\n      t.ProjectionTypeAll(); //default is NONE\r\n    });\r\n  });\r\n};\r\n\r\nexports.down = function(migrator){\r\n  return migrator().deleteTable('chats');\r\n};\r\n```\r\n\r\n##### Run latest migration.\r\n```sh\r\nnpd migrate:run\r\n```\r\n\r\n##### Rollback latest migration.\r\n```sh\r\nnpd migrate:rollback\r\n```\r\n\r\n## Command Line Interfaces (required global install and type `npd`)\r\n### Commands\r\n* `init`: Create a fresh npdfile.js.\r\n* `migrate:generate <name>` Create a named migration file.\r\n* `migrate:run` Run all migrations that have not yet been run.\r\n* `migrate:rollback` Rollback the last set of migrations performed.\r\n* `listTables` List existing tables.\r\n* `dump <table>`: Dump amount of records in specified table to stdout.\r\n* `desc <table>`: Show result of the describe operation\r\n* `get <table> <hashKey> [rangeKey]`: Show results of the query operation by given conditions.\r\n* `dropTable <table>`: Drop the specified table.\r\n\r\n### Global Options\r\n* `-h`\r\n* `-V`\r\n* `--env`\r\n\r\n## How to test?\r\n```sh\r\nnpm test\r\n```\r\n\r\n## QueryBuilder Callbacks\r\nYou can be hooked several events and their can be taken promise.\r\n\r\nMechanism of Callbacks and Events\r\n```\r\noperation called.\r\n      ↓\r\ncallbacks: beforeQuery\r\n      ↓\r\nevents: beforeQuery\r\n      ↓\r\nSending Request to Dynamodb\r\n      ↓\r\nGetting Response from Dynamodb\r\n      ↓\r\ncallbacks: afterQuery\r\n      ↓\r\nevents: afterQuery\r\n```\r\n\r\n```js\r\n// Register callbacks globally\r\nvar npd = npdynamodb.createClient(dynamodb, {\r\n  initialize: function(){\r\n    this.callbacks('beforeQuery', function(){\r\n      if(this._fature.params['hash_key'] !== 1) {\r\n        return Promise.reject(new Error('invalid value'));\r\n      }\r\n    });\r\n\r\n    this.callbacks('afterQuery', function(result){\r\n      return npd().table('related').create({\r\n        foo_id: result.Items[0]['hash_key'],\r\n        bar: 'string value'\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\n// Register callbacks at only this time.\r\nnpd().table('foo').callbacks('beforeQuery', Func).create({\r\n  hoo: 'hoo',\r\n  bar: 'bar'\r\n});\r\n```\r\n\r\n## Plugin and Extending\r\nNpdynamodb can be accepted plugins.\r\n\r\n```js\r\nnpdynamodb.plugin(function(Klass){\r\n\r\n  // Extend QueryBuilder\r\n  Klass.QueryBuilder.extend({\r\n    protoFn: function(){\r\n      console.log('foo');\r\n    }\r\n  },\r\n  {\r\n    staticFn: function(){\r\n      console.log('bar');\r\n    }\r\n  });\r\n\r\n  // Extend Orm Collection\r\n  Klass.Collection.extend({\r\n    protoFn: function(){\r\n      console.log('foo');\r\n    }\r\n  },\r\n  {\r\n    staticFn: function(){\r\n      console.log('bar');\r\n    }\r\n  });\r\n\r\n  // Extend Orm Model\r\n  Klass.Model.extend({\r\n    protoFn: function(){\r\n      console.log('foo');\r\n    }\r\n  },\r\n  {\r\n    staticFn: function(){\r\n      console.log('bar');\r\n    }\r\n  });\r\n\r\n});\r\n```\r\n\r\n## Browser Support\r\nNpdynamodb can be built using browserify or webpack, and pre-built or pre-built with uglified version can be found in the build directory.\r\n\r\n#### Note that, if you use Npdynamodb on any browsers, It has a security issue. Because AccessKey and SecretAccessKey for DynamoDB can be seen from public. We recommend you only using it for private or readonly projects which is not including any privacy informations.\r\n\r\n\r\n### For Browserify or Webpack\r\n```js\r\nvar AWS = require('aws-sdk');\r\nvar npdynamodb = require('npdynamodb/build/npdynamodb');\r\n\r\nvar dynamodb = new AWS.DynamoDB({\r\n  apiVersion: '2012-08-10',\r\n  accessKeyId: \"here is key\",\r\n  secretAccessKey: \"here is secret key\",\r\n  region: \"ap-northeast-1\",\r\n  sslEnabled: true,\r\n});\r\n\r\nvar npd = npdynamodb.createClient(dynamodb);\r\nnpd().table('table_name').where('id', 1).then(function(data){\r\n  console.log(data);\r\n});\r\n```\r\n\r\n### For HTML\r\n```html\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/aws-sdk/2.1.39/aws-sdk.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.0/lodash.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bluebird/2.9.33/bluebird.min.js\"></script>\r\n<script src=\"../build/npdynamodb.min.js\"></script>\r\n<script>\r\n  var dynamodb = new AWS.DynamoDB({\r\n    apiVersion: '2012-08-10',\r\n    accessKeyId: \"here is key\",\r\n    secretAccessKey: \"here is secret key\",\r\n    region: \"ap-northeast-1\",\r\n    sslEnabled: true,\r\n  });\r\n\r\n  var npd = npdynamodb.createClient(dynamodb);\r\n  npd().table('table_name').where('id', 1).then(function(data){\r\n    console.log(data);\r\n  });\r\n</script>\r\n```\r\n\r\n## Upgrading and Release Note\r\n#### Upgrading 0.1x -> 0.2x\r\n\r\n##### QueryBuilder\r\nThere should be a minor change for QueryBuilder. 0.2x  QueryBuilder can take options as second argument of createClient.\r\n* 0.2.0: `timeout` option supported.\r\n* 0.2.6: `initialize` option and [callbacks](#querybuilder-callbacks) supported.\r\n* 0.2.7: [whereIn](wherein) method supported.\r\n\r\n##### ORM\r\nThere should be a major change for ORM. 0.2x ORM constructor need to pass the npdynamodb instance instead of pure dynamodb instance.\r\n* 0.2.7: Supported to parse `whereIn` results.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2015 Yuki Takei(Noppoman) yuki@miketokyo.com\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and marthis permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-65297844-1","note":"Don't delete this file! It's used internally to help with page regeneration."}